/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    sheet?: number;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    row?: number;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    column?: string;
}
/**
 * 
 * @export
 * @interface Cell
 */
export interface Cell {
    /**
     * 
     * @type {number}
     * @memberof Cell
     */
    period?: number;
    /**
     * 
     * @type {string}
     * @memberof Cell
     */
    name?: string;
    /**
     * 
     * @type {Item}
     * @memberof Cell
     */
    item?: Item;
    /**
     * 
     * @type {number}
     * @memberof Cell
     */
    value?: number;
    /**
     * 
     * @type {string}
     * @memberof Cell
     */
    formula?: string;
    /**
     * 
     * @type {Address}
     * @memberof Cell
     */
    address?: Address;
    /**
     * 
     * @type {Array<string>}
     * @memberof Cell
     */
    dependentCellNames?: Array<string>;
}
/**
 * 
 * @export
 * @interface FixedCost
 */
export interface FixedCost {
    /**
     * 
     * @type {number}
     * @memberof FixedCost
     */
    cost?: number;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    type?: ItemTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    historicalValue?: number;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    expression?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    segment?: string;
    /**
     * 
     * @type {SubscriptionRevenue}
     * @memberof Item
     */
    subscriptionRevenue?: SubscriptionRevenue;
    /**
     * 
     * @type {PercentOfTotalAsset}
     * @memberof Item
     */
    percentOfTotalAsset?: PercentOfTotalAsset;
    /**
     * 
     * @type {PercentOfRevenue}
     * @memberof Item
     */
    percentOfRevenue?: PercentOfRevenue;
    /**
     * 
     * @type {UnitSalesRevenue}
     * @memberof Item
     */
    unitSalesRevenue?: UnitSalesRevenue;
    /**
     * 
     * @type {FixedCost}
     * @memberof Item
     */
    fixedCost?: FixedCost;
    /**
     * 
     * @type {boolean}
     * @memberof Item
     */
    stockBasedCompensation?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Item
     */
    nonCashExpense?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemTypeEnum {
    SubscriptionRevenue = 'SubscriptionRevenue',
    UnitSalesRevenue = 'UnitSalesRevenue',
    Custom = 'Custom',
    PercentOfRevenue = 'PercentOfRevenue',
    PercentOfTotalAsset = 'PercentOfTotalAsset',
    FixedCost = 'FixedCost'
}

/**
 * 
 * @export
 * @interface MXParserEvaluateRequest
 */
export interface MXParserEvaluateRequest {
    /**
     * 
     * @type {string}
     * @memberof MXParserEvaluateRequest
     */
    formula?: string;
}
/**
 * 
 * @export
 * @interface MXParserEvaluateResponse
 */
export interface MXParserEvaluateResponse {
    /**
     * 
     * @type {number}
     * @memberof MXParserEvaluateResponse
     */
    value?: number;
    /**
     * 
     * @type {string}
     * @memberof MXParserEvaluateResponse
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface Model
 */
export interface Model {
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    get_id?: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    symbol?: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    cik?: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Model
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Array<Item>}
     * @memberof Model
     */
    incomeStatementItems?: Array<Item>;
    /**
     * 
     * @type {Array<Item>}
     * @memberof Model
     */
    balanceSheetItems?: Array<Item>;
    /**
     * 
     * @type {Array<Item>}
     * @memberof Model
     */
    otherItems?: Array<Item>;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    currentPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    beta?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    sharesOutstanding?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    dilutedSharesOutstanding?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    corporateTaxRate?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    costOfDebt?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    riskFreeRate?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    equityRiskPremium?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    terminalFcfMultiple?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    terminalFcfGrowthRate?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    periods?: number;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    updatedBy?: string;
}
/**
 * 
 * @export
 * @interface ModelEvaluationOutput
 */
export interface ModelEvaluationOutput {
    /**
     * 
     * @type {Array<Cell>}
     * @memberof ModelEvaluationOutput
     */
    cells?: Array<Cell>;
    /**
     * 
     * @type {number}
     * @memberof ModelEvaluationOutput
     */
    pvOfFcf?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelEvaluationOutput
     */
    terminalFcf?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelEvaluationOutput
     */
    targetPriceUnderExitMultipleMethod?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelEvaluationOutput
     */
    targetPriceUnderPerpetuityMethod?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelEvaluationOutput
     */
    pvOfTerminalValueUnderPerpetuityMethod?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelEvaluationOutput
     */
    pvOfTerminalValueUnderExitMultipleMethod?: number;
}
/**
 * 
 * @export
 * @interface ModelHistory
 */
export interface ModelHistory {
    /**
     * 
     * @type {string}
     * @memberof ModelHistory
     */
    get_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelHistory
     */
    modelId?: string;
    /**
     * 
     * @type {Model}
     * @memberof ModelHistory
     */
    model?: Model;
    /**
     * 
     * @type {string}
     * @memberof ModelHistory
     */
    changeSummary?: string;
}
/**
 * 
 * @export
 * @interface PercentOfRevenue
 */
export interface PercentOfRevenue {
    /**
     * 
     * @type {number}
     * @memberof PercentOfRevenue
     */
    percentOfRevenue?: number;
}
/**
 * 
 * @export
 * @interface PercentOfTotalAsset
 */
export interface PercentOfTotalAsset {
    /**
     * 
     * @type {number}
     * @memberof PercentOfTotalAsset
     */
    percentOfTotalAsset?: number;
}
/**
 * 
 * @export
 * @interface SubscriptionRevenue
 */
export interface SubscriptionRevenue {
    /**
     * 
     * @type {number}
     * @memberof SubscriptionRevenue
     */
    totalSubscriptionAtTerminalYear?: number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionRevenue
     */
    initialSubscriptions?: number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionRevenue
     */
    averageRevenuePerSubscription?: number;
}
/**
 * 
 * @export
 * @interface UnitSalesRevenue
 */
export interface UnitSalesRevenue {
    /**
     * 
     * @type {number}
     * @memberof UnitSalesRevenue
     */
    steadyStateUnitsSold?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitSalesRevenue
     */
    averageSellingPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitSalesRevenue
     */
    initialUnitsSold?: number;
}

/**
 * ModelBuilderControllerApi - axios parameter creator
 * @export
 */
export const ModelBuilderControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/model-builder/createModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateModel: async (model: Model, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('evaluateModel', 'model', model)
            const localVarPath = `/api/model-builder/evaluateModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reformulateModel: async (model: Model, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('reformulateModel', 'model', model)
            const localVarPath = `/api/model-builder/reformulateModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelBuilderControllerApi - functional programming interface
 * @export
 */
export const ModelBuilderControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelBuilderControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createModel(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createModel(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateModel(model: Model, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelEvaluationOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluateModel(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reformulateModel(model: Model, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reformulateModel(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModelBuilderControllerApi - factory interface
 * @export
 */
export const ModelBuilderControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModelBuilderControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel(options?: any): AxiosPromise<Model> {
            return localVarFp.createModel(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateModel(model: Model, options?: any): AxiosPromise<ModelEvaluationOutput> {
            return localVarFp.evaluateModel(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reformulateModel(model: Model, options?: any): AxiosPromise<Model> {
            return localVarFp.reformulateModel(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ModelBuilderControllerApi - object-oriented interface
 * @export
 * @class ModelBuilderControllerApi
 * @extends {BaseAPI}
 */
export class ModelBuilderControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelBuilderControllerApi
     */
    public createModel(options?: any) {
        return ModelBuilderControllerApiFp(this.configuration).createModel(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Model} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelBuilderControllerApi
     */
    public evaluateModel(model: Model, options?: any) {
        return ModelBuilderControllerApiFp(this.configuration).evaluateModel(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Model} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelBuilderControllerApi
     */
    public reformulateModel(model: Model, options?: any) {
        return ModelBuilderControllerApiFp(this.configuration).reformulateModel(model, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ModelsControllerApi - axios parameter creator
 * @export
 */
export const ModelsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteModel', 'id', id)
            const localVarPath = `/api/models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getHistory', 'id', id)
            const localVarPath = `/api/models/{id}/history`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getModel', 'id', id)
            const localVarPath = `/api/models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sample: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/models/sample`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveModel: async (model: Model, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('saveModel', 'model', model)
            const localVarPath = `/api/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelsControllerApi - functional programming interface
 * @export
 */
export const ModelsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModel(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteModel(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistory(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelHistory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistory(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModel(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getModel(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModels(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Model>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModels(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sample(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sample(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveModel(model: Model, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveModel(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModelsControllerApi - factory interface
 * @export
 */
export const ModelsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModelsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteModel(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory(id: string, options?: any): AxiosPromise<Array<ModelHistory>> {
            return localVarFp.getHistory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel(id: string, options?: any): AxiosPromise<Model> {
            return localVarFp.getModel(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels(options?: any): AxiosPromise<Array<Model>> {
            return localVarFp.listModels(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sample(options?: any): AxiosPromise<Model> {
            return localVarFp.sample(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveModel(model: Model, options?: any): AxiosPromise<Model> {
            return localVarFp.saveModel(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ModelsControllerApi - object-oriented interface
 * @export
 * @class ModelsControllerApi
 * @extends {BaseAPI}
 */
export class ModelsControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsControllerApi
     */
    public deleteModel(id: string, options?: any) {
        return ModelsControllerApiFp(this.configuration).deleteModel(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsControllerApi
     */
    public getHistory(id: string, options?: any) {
        return ModelsControllerApiFp(this.configuration).getHistory(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsControllerApi
     */
    public getModel(id: string, options?: any) {
        return ModelsControllerApiFp(this.configuration).getModel(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsControllerApi
     */
    public listModels(options?: any) {
        return ModelsControllerApiFp(this.configuration).listModels(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsControllerApi
     */
    public sample(options?: any) {
        return ModelsControllerApiFp(this.configuration).sample(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Model} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsControllerApi
     */
    public saveModel(model: Model, options?: any) {
        return ModelsControllerApiFp(this.configuration).saveModel(model, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MxParserControllerApi - axios parameter creator
 * @export
 */
export const MxParserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MXParserEvaluateRequest} mXParserEvaluateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluate: async (mXParserEvaluateRequest: MXParserEvaluateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mXParserEvaluateRequest' is not null or undefined
            assertParamExists('evaluate', 'mXParserEvaluateRequest', mXParserEvaluateRequest)
            const localVarPath = `/api/mxparser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mXParserEvaluateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MxParserControllerApi - functional programming interface
 * @export
 */
export const MxParserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MxParserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MXParserEvaluateRequest} mXParserEvaluateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluate(mXParserEvaluateRequest: MXParserEvaluateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MXParserEvaluateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluate(mXParserEvaluateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MxParserControllerApi - factory interface
 * @export
 */
export const MxParserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MxParserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {MXParserEvaluateRequest} mXParserEvaluateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluate(mXParserEvaluateRequest: MXParserEvaluateRequest, options?: any): AxiosPromise<MXParserEvaluateResponse> {
            return localVarFp.evaluate(mXParserEvaluateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MxParserControllerApi - object-oriented interface
 * @export
 * @class MxParserControllerApi
 * @extends {BaseAPI}
 */
export class MxParserControllerApi extends BaseAPI {
    /**
     * 
     * @param {MXParserEvaluateRequest} mXParserEvaluateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxParserControllerApi
     */
    public evaluate(mXParserEvaluateRequest: MXParserEvaluateRequest, options?: any) {
        return MxParserControllerApiFp(this.configuration).evaluate(mXParserEvaluateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


