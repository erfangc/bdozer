/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    sheet?: number;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    sheetName?: string;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    row?: number;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    column?: number;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    columnLetter?: string;
}
/**
 * 
 * @export
 * @interface Cell
 */
export interface Cell {
    /**
     * 
     * @type {number}
     * @memberof Cell
     */
    period?: number;
    /**
     * 
     * @type {string}
     * @memberof Cell
     */
    name?: string;
    /**
     * 
     * @type {Item}
     * @memberof Cell
     */
    item?: Item;
    /**
     * 
     * @type {number}
     * @memberof Cell
     */
    value?: number;
    /**
     * 
     * @type {string}
     * @memberof Cell
     */
    formula?: string;
    /**
     * 
     * @type {string}
     * @memberof Cell
     */
    excelFormula?: string;
    /**
     * 
     * @type {Address}
     * @memberof Cell
     */
    address?: Address;
    /**
     * 
     * @type {Array<string>}
     * @memberof Cell
     */
    dependentCellNames?: Array<string>;
}
/**
 * 
 * @export
 * @interface Commentary
 */
export interface Commentary {
    /**
     * 
     * @type {string}
     * @memberof Commentary
     */
    commentary?: string;
    /**
     * 
     * @type {string}
     * @memberof Commentary
     */
    generatorClass?: string;
}
/**
 * 
 * @export
 * @interface Discrete
 */
export interface Discrete {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Discrete
     */
    formulas?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface EdgarEntity
 */
export interface EdgarEntity {
    /**
     * 
     * @type {string}
     * @memberof EdgarEntity
     */
    get_id?: string;
    /**
     * 
     * @type {string}
     * @memberof EdgarEntity
     */
    get_index?: string;
    /**
     * 
     * @type {string}
     * @memberof EdgarEntity
     */
    get_type?: string;
    /**
     * 
     * @type {EdgarEntitySource}
     * @memberof EdgarEntity
     */
    get_source?: EdgarEntitySource;
}
/**
 * 
 * @export
 * @interface EdgarEntitySource
 */
export interface EdgarEntitySource {
    /**
     * 
     * @type {string}
     * @memberof EdgarEntitySource
     */
    entity?: string;
    /**
     * 
     * @type {string}
     * @memberof EdgarEntitySource
     */
    entity_words?: string;
    /**
     * 
     * @type {string}
     * @memberof EdgarEntitySource
     */
    tickers?: string;
    /**
     * 
     * @type {number}
     * @memberof EdgarEntitySource
     */
    rank?: number;
}
/**
 * 
 * @export
 * @interface EdgarFilingMetadata
 */
export interface EdgarFilingMetadata {
    /**
     * 
     * @type {Array<string>}
     * @memberof EdgarFilingMetadata
     */
    ciks?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof EdgarFilingMetadata
     */
    period_ending?: string;
    /**
     * 
     * @type {string}
     * @memberof EdgarFilingMetadata
     */
    root_form?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EdgarFilingMetadata
     */
    file_num?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof EdgarFilingMetadata
     */
    display_names?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof EdgarFilingMetadata
     */
    sequence?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EdgarFilingMetadata
     */
    biz_states?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof EdgarFilingMetadata
     */
    sics?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof EdgarFilingMetadata
     */
    form?: string;
    /**
     * 
     * @type {string}
     * @memberof EdgarFilingMetadata
     */
    adsh?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EdgarFilingMetadata
     */
    biz_locations?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof EdgarFilingMetadata
     */
    file_date?: string;
    /**
     * 
     * @type {string}
     * @memberof EdgarFilingMetadata
     */
    file_type?: string;
    /**
     * 
     * @type {string}
     * @memberof EdgarFilingMetadata
     */
    file_description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EdgarFilingMetadata
     */
    inc_states?: Array<string>;
}
/**
 * 
 * @export
 * @interface Fact
 */
export interface Fact {
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    get_id?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    instanceDocumentElementId?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    instanceDocumentElementName?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    cik?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    adsh?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    entityName?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    primarySymbol?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    formType?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    conceptName?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    conceptHref?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    namespace?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    instant?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    startDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    endDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    documentFiscalPeriodFocus?: FactDocumentFiscalPeriodFocusEnum;
    /**
     * 
     * @type {number}
     * @memberof Fact
     */
    documentFiscalYearFocus?: number;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    documentPeriodEndDate?: string;
    /**
     * 
     * @type {Array<XbrlExplicitMember>}
     * @memberof Fact
     */
    explicitMembers?: Array<XbrlExplicitMember>;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    sourceDocument?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    verboseLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    labelTerse?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    documentation?: string;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    stringValue?: string;
    /**
     * 
     * @type {number}
     * @memberof Fact
     */
    doubleValue?: number;
    /**
     * 
     * @type {string}
     * @memberof Fact
     */
    lastUpdated?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FactDocumentFiscalPeriodFocusEnum {
    Fy = 'FY',
    Q1 = 'Q1',
    Q2 = 'Q2',
    Q3 = 'Q3',
    Q4 = 'Q4'
}

/**
 * 
 * @export
 * @interface FilingEntity
 */
export interface FilingEntity {
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    get_id?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    cik?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    tradingSymbol?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    entityType?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    sic?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    sicDescription?: string;
    /**
     * 
     * @type {number}
     * @memberof FilingEntity
     */
    insiderTransactionForOwnerExists?: number;
    /**
     * 
     * @type {number}
     * @memberof FilingEntity
     */
    insiderTransactionForIssuerExists?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof FilingEntity
     */
    tickers?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FilingEntity
     */
    exchanges?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    ein?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    website?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    investorWebsite?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    fiscalYearEnd?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    stateOfIncorporation?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    stateOfIncorporationDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    phone?: string;
    /**
     * 
     * @type {Address}
     * @memberof FilingEntity
     */
    businessAddress?: Address;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    statusMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    lastUpdated?: string;
    /**
     * 
     * @type {string}
     * @memberof FilingEntity
     */
    latestAdsh?: string;
    /**
     * 
     * @type {Model}
     * @memberof FilingEntity
     */
    model?: Model;
}
/**
 * 
 * @export
 * @interface FixedCost
 */
export interface FixedCost {
    /**
     * 
     * @type {number}
     * @memberof FixedCost
     */
    cost?: number;
}
/**
 * 
 * @export
 * @interface HistoricalValue
 */
export interface HistoricalValue {
    /**
     * 
     * @type {string}
     * @memberof HistoricalValue
     */
    factId?: string;
    /**
     * 
     * @type {string}
     * @memberof HistoricalValue
     */
    documentFiscalPeriodFocus?: string;
    /**
     * 
     * @type {number}
     * @memberof HistoricalValue
     */
    documentFiscalYearFocus?: number;
    /**
     * 
     * @type {string}
     * @memberof HistoricalValue
     */
    documentPeriodEndDate?: string;
    /**
     * 
     * @type {number}
     * @memberof HistoricalValue
     */
    value?: number;
    /**
     * 
     * @type {string}
     * @memberof HistoricalValue
     */
    startDate?: string;
    /**
     * 
     * @type {string}
     * @memberof HistoricalValue
     */
    endDate?: string;
    /**
     * 
     * @type {string}
     * @memberof HistoricalValue
     */
    instant?: string;
}
/**
 * 
 * @export
 * @interface HistoricalValues
 */
export interface HistoricalValues {
    /**
     * 
     * @type {Array<HistoricalValue>}
     * @memberof HistoricalValues
     */
    fiscalYear?: Array<HistoricalValue>;
    /**
     * 
     * @type {Array<HistoricalValue>}
     * @memberof HistoricalValues
     */
    quarterly?: Array<HistoricalValue>;
    /**
     * 
     * @type {HistoricalValue}
     * @memberof HistoricalValues
     */
    ltm?: HistoricalValue;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    type?: ItemTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    historicalValue?: number;
    /**
     * 
     * @type {HistoricalValues}
     * @memberof Item
     */
    historicalValues?: HistoricalValues;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    expression?: string;
    /**
     * 
     * @type {SubscriptionRevenue}
     * @memberof Item
     */
    subscriptionRevenue?: SubscriptionRevenue;
    /**
     * 
     * @type {Discrete}
     * @memberof Item
     */
    discrete?: Discrete;
    /**
     * 
     * @type {PercentOfTotalAsset}
     * @memberof Item
     */
    percentOfTotalAsset?: PercentOfTotalAsset;
    /**
     * 
     * @type {PercentOfRevenue}
     * @memberof Item
     */
    percentOfRevenue?: PercentOfRevenue;
    /**
     * 
     * @type {UnitSalesRevenue}
     * @memberof Item
     */
    unitSalesRevenue?: UnitSalesRevenue;
    /**
     * 
     * @type {FixedCost}
     * @memberof Item
     */
    fixedCost?: FixedCost;
    /**
     * 
     * @type {boolean}
     * @memberof Item
     */
    stockBasedCompensation?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Item
     */
    nonCashExpense?: boolean;
    /**
     * 
     * @type {Commentary}
     * @memberof Item
     */
    commentaries?: Commentary;
    /**
     * 
     * @type {boolean}
     * @memberof Item
     */
    subtotal?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemTypeEnum {
    Discrete = 'Discrete',
    SubscriptionRevenue = 'SubscriptionRevenue',
    UnitSalesRevenue = 'UnitSalesRevenue',
    Custom = 'Custom',
    PercentOfRevenue = 'PercentOfRevenue',
    PercentOfTotalAsset = 'PercentOfTotalAsset',
    FixedCost = 'FixedCost'
}

/**
 * 
 * @export
 * @interface Model
 */
export interface Model {
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    get_id?: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    symbol?: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    cik?: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Model
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Array<Item>}
     * @memberof Model
     */
    incomeStatementItems?: Array<Item>;
    /**
     * 
     * @type {Array<Item>}
     * @memberof Model
     */
    balanceSheetItems?: Array<Item>;
    /**
     * 
     * @type {Array<Item>}
     * @memberof Model
     */
    cashFlowStatementItems?: Array<Item>;
    /**
     * 
     * @type {Array<Item>}
     * @memberof Model
     */
    otherItems?: Array<Item>;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    currentPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    beta?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    sharesOutstanding?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    dilutedSharesOutstanding?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    corporateTaxRate?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    costOfDebt?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    riskFreeRate?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    equityRiskPremium?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    terminalFcfMultiple?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    terminalFcfGrowthRate?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    periods?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    excelColumnOffset?: number;
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    excelRowOffset?: number;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    updatedBy?: string;
}
/**
 * 
 * @export
 * @interface ModelEvaluationOutput
 */
export interface ModelEvaluationOutput {
    /**
     * 
     * @type {Array<Cell>}
     * @memberof ModelEvaluationOutput
     */
    cells?: Array<Cell>;
    /**
     * 
     * @type {number}
     * @memberof ModelEvaluationOutput
     */
    pvOfFcf?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelEvaluationOutput
     */
    terminalFcf?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelEvaluationOutput
     */
    targetPriceUnderExitMultipleMethod?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelEvaluationOutput
     */
    targetPriceUnderPerpetuityMethod?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelEvaluationOutput
     */
    pvOfTerminalValueUnderPerpetuityMethod?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelEvaluationOutput
     */
    pvOfTerminalValueUnderExitMultipleMethod?: number;
}
/**
 * 
 * @export
 * @interface ModelHistory
 */
export interface ModelHistory {
    /**
     * 
     * @type {string}
     * @memberof ModelHistory
     */
    get_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelHistory
     */
    modelId?: string;
    /**
     * 
     * @type {Model}
     * @memberof ModelHistory
     */
    model?: Model;
    /**
     * 
     * @type {string}
     * @memberof ModelHistory
     */
    changeSummary?: string;
}
/**
 * 
 * @export
 * @interface MxParserEvaluateRequest
 */
export interface MxParserEvaluateRequest {
    /**
     * 
     * @type {string}
     * @memberof MxParserEvaluateRequest
     */
    formula?: string;
}
/**
 * 
 * @export
 * @interface MxParserEvaluateResponse
 */
export interface MxParserEvaluateResponse {
    /**
     * 
     * @type {number}
     * @memberof MxParserEvaluateResponse
     */
    value?: number;
    /**
     * 
     * @type {string}
     * @memberof MxParserEvaluateResponse
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface Narrative
 */
export interface Narrative {
    /**
     * 
     * @type {Model}
     * @memberof Narrative
     */
    model?: Model;
    /**
     * 
     * @type {TalkingPoint}
     * @memberof Narrative
     */
    revenueTalkingPoint?: TalkingPoint;
    /**
     * 
     * @type {TalkingPoint}
     * @memberof Narrative
     */
    variableCostTalkingPoint?: TalkingPoint;
    /**
     * 
     * @type {TalkingPoint}
     * @memberof Narrative
     */
    fixedCostTalkingPoint?: TalkingPoint;
    /**
     * 
     * @type {TalkingPoint}
     * @memberof Narrative
     */
    otherExpensesTalkingPoint?: TalkingPoint;
    /**
     * 
     * @type {TalkingPoint}
     * @memberof Narrative
     */
    epsTalkingPoint?: TalkingPoint;
    /**
     * 
     * @type {TalkingPoint}
     * @memberof Narrative
     */
    noGrowthValueTalkingPoint?: TalkingPoint;
    /**
     * 
     * @type {TalkingPoint}
     * @memberof Narrative
     */
    growthTalkingPoint?: TalkingPoint;
    /**
     * 
     * @type {TalkingPoint}
     * @memberof Narrative
     */
    targetPriceTalkingPoint?: TalkingPoint;
    /**
     * 
     * @type {TalkingPoint}
     * @memberof Narrative
     */
    netIncomeTalkingPoint?: TalkingPoint;
}
/**
 * 
 * @export
 * @interface PercentOfRevenue
 */
export interface PercentOfRevenue {
    /**
     * 
     * @type {number}
     * @memberof PercentOfRevenue
     */
    percentOfRevenue?: number;
}
/**
 * 
 * @export
 * @interface PercentOfTotalAsset
 */
export interface PercentOfTotalAsset {
    /**
     * 
     * @type {number}
     * @memberof PercentOfTotalAsset
     */
    percentOfTotalAsset?: number;
}
/**
 * 
 * @export
 * @interface Projection
 */
export interface Projection {
    /**
     * 
     * @type {number}
     * @memberof Projection
     */
    year?: number;
    /**
     * 
     * @type {number}
     * @memberof Projection
     */
    value?: number;
}
/**
 * 
 * @export
 * @interface SubscriptionRevenue
 */
export interface SubscriptionRevenue {
    /**
     * 
     * @type {number}
     * @memberof SubscriptionRevenue
     */
    totalSubscriptionAtTerminalYear?: number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionRevenue
     */
    initialSubscriptions?: number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionRevenue
     */
    averageRevenuePerSubscription?: number;
}
/**
 * 
 * @export
 * @interface TalkingPoint
 */
export interface TalkingPoint {
    /**
     * 
     * @type {number}
     * @memberof TalkingPoint
     */
    data?: number;
    /**
     * 
     * @type {Array<Projection>}
     * @memberof TalkingPoint
     */
    projections?: Array<Projection>;
    /**
     * 
     * @type {string}
     * @memberof TalkingPoint
     */
    commentary?: string;
    /**
     * 
     * @type {string}
     * @memberof TalkingPoint
     */
    forwardCommentary?: string;
}
/**
 * 
 * @export
 * @interface UnitSalesRevenue
 */
export interface UnitSalesRevenue {
    /**
     * 
     * @type {number}
     * @memberof UnitSalesRevenue
     */
    steadyStateUnitsSold?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitSalesRevenue
     */
    averageSellingPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitSalesRevenue
     */
    initialUnitsSold?: number;
}
/**
 * 
 * @export
 * @interface XbrlExplicitMember
 */
export interface XbrlExplicitMember {
    /**
     * 
     * @type {string}
     * @memberof XbrlExplicitMember
     */
    dimension?: string;
    /**
     * 
     * @type {string}
     * @memberof XbrlExplicitMember
     */
    value?: string;
}

/**
 * EdgarExplorerControllerApi - axios parameter creator
 * @export
 */
export const EdgarExplorerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} term 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEntities: async (term: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('searchEntities', 'term', term)
            const localVarPath = `/public/edgar-explorer/entities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFilings: async (cik: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cik' is not null or undefined
            assertParamExists('searchFilings', 'cik', cik)
            const localVarPath = `/public/edgar-explorer/filings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cik !== undefined) {
                localVarQueryParameter['cik'] = cik;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EdgarExplorerControllerApi - functional programming interface
 * @export
 */
export const EdgarExplorerControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EdgarExplorerControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} term 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchEntities(term: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EdgarEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchEntities(term, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFilings(cik: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EdgarFilingMetadata>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchFilings(cik, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EdgarExplorerControllerApi - factory interface
 * @export
 */
export const EdgarExplorerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EdgarExplorerControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} term 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEntities(term: string, options?: any): AxiosPromise<Array<EdgarEntity>> {
            return localVarFp.searchEntities(term, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFilings(cik: string, options?: any): AxiosPromise<Array<EdgarFilingMetadata>> {
            return localVarFp.searchFilings(cik, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EdgarExplorerControllerApi - object-oriented interface
 * @export
 * @class EdgarExplorerControllerApi
 * @extends {BaseAPI}
 */
export class EdgarExplorerControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} term 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgarExplorerControllerApi
     */
    public searchEntities(term: string, options?: any) {
        return EdgarExplorerControllerApiFp(this.configuration).searchEntities(term, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cik 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgarExplorerControllerApi
     */
    public searchFilings(cik: string, options?: any) {
        return EdgarExplorerControllerApiFp(this.configuration).searchFilings(cik, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FactBaseControllerApi - axios parameter creator
 * @export
 */
export const FactBaseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allFactsForCik: async (cik: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cik' is not null or undefined
            assertParamExists('allFactsForCik', 'cik', cik)
            const localVarPath = `/api/fact-base/{cik}/all-facts`
                .replace(`{${"cik"}}`, encodeURIComponent(String(cik)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} adsh 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildModelForFiling: async (adsh: string, cik: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'adsh' is not null or undefined
            assertParamExists('buildModelForFiling', 'adsh', adsh)
            // verify required parameter 'cik' is not null or undefined
            assertParamExists('buildModelForFiling', 'cik', cik)
            const localVarPath = `/api/fact-base/model-factory/{cik}/{adsh}`
                .replace(`{${"adsh"}}`, encodeURIComponent(String(adsh)))
                .replace(`{${"cik"}}`, encodeURIComponent(String(cik)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cik 
         * @param {string} adsh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestFiling: async (cik: string, adsh: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cik' is not null or undefined
            assertParamExists('ingestFiling', 'cik', cik)
            // verify required parameter 'adsh' is not null or undefined
            assertParamExists('ingestFiling', 'adsh', adsh)
            const localVarPath = `/api/fact-base/filing-ingestor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cik !== undefined) {
                localVarQueryParameter['cik'] = cik;
            }

            if (adsh !== undefined) {
                localVarQueryParameter['adsh'] = adsh;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cik 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestQ4Facts: async (cik: string, year: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cik' is not null or undefined
            assertParamExists('ingestQ4Facts', 'cik', cik)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('ingestQ4Facts', 'year', year)
            const localVarPath = `/api/fact-base/filing-ingestor/q4`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cik !== undefined) {
                localVarQueryParameter['cik'] = cik;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FactBaseControllerApi - functional programming interface
 * @export
 */
export const FactBaseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FactBaseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allFactsForCik(cik: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Fact>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allFactsForCik(cik, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} adsh 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildModelForFiling(adsh: string, cik: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildModelForFiling(adsh, cik, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cik 
         * @param {string} adsh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ingestFiling(cik: string, adsh: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ingestFiling(cik, adsh, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cik 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ingestQ4Facts(cik: string, year: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ingestQ4Facts(cik, year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FactBaseControllerApi - factory interface
 * @export
 */
export const FactBaseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FactBaseControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allFactsForCik(cik: string, options?: any): AxiosPromise<Array<Fact>> {
            return localVarFp.allFactsForCik(cik, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} adsh 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildModelForFiling(adsh: string, cik: string, options?: any): AxiosPromise<Model> {
            return localVarFp.buildModelForFiling(adsh, cik, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cik 
         * @param {string} adsh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestFiling(cik: string, adsh: string, options?: any): AxiosPromise<void> {
            return localVarFp.ingestFiling(cik, adsh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cik 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestQ4Facts(cik: string, year: number, options?: any): AxiosPromise<void> {
            return localVarFp.ingestQ4Facts(cik, year, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FactBaseControllerApi - object-oriented interface
 * @export
 * @class FactBaseControllerApi
 * @extends {BaseAPI}
 */
export class FactBaseControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} cik 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactBaseControllerApi
     */
    public allFactsForCik(cik: string, options?: any) {
        return FactBaseControllerApiFp(this.configuration).allFactsForCik(cik, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} adsh 
     * @param {string} cik 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactBaseControllerApi
     */
    public buildModelForFiling(adsh: string, cik: string, options?: any) {
        return FactBaseControllerApiFp(this.configuration).buildModelForFiling(adsh, cik, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cik 
     * @param {string} adsh 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactBaseControllerApi
     */
    public ingestFiling(cik: string, adsh: string, options?: any) {
        return FactBaseControllerApiFp(this.configuration).ingestFiling(cik, adsh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cik 
     * @param {number} year 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactBaseControllerApi
     */
    public ingestQ4Facts(cik: string, year: number, options?: any) {
        return FactBaseControllerApiFp(this.configuration).ingestQ4Facts(cik, year, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilingEntityManagerControllerApi - axios parameter creator
 * @export
 */
export const FilingEntityManagerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bootstrapFilingEntity: async (cik: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cik' is not null or undefined
            assertParamExists('bootstrapFilingEntity', 'cik', cik)
            const localVarPath = `/api/filing-entity-manager/{cik}`
                .replace(`{${"cik"}}`, encodeURIComponent(String(cik)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilingEntity: async (cik: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cik' is not null or undefined
            assertParamExists('getFilingEntity', 'cik', cik)
            const localVarPath = `/api/filing-entity-manager/{cik}`
                .replace(`{${"cik"}}`, encodeURIComponent(String(cik)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilingEntityManagerControllerApi - functional programming interface
 * @export
 */
export const FilingEntityManagerControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilingEntityManagerControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bootstrapFilingEntity(cik: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilingEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bootstrapFilingEntity(cik, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilingEntity(cik: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilingEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFilingEntity(cik, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilingEntityManagerControllerApi - factory interface
 * @export
 */
export const FilingEntityManagerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilingEntityManagerControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bootstrapFilingEntity(cik: string, options?: any): AxiosPromise<FilingEntity> {
            return localVarFp.bootstrapFilingEntity(cik, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cik 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilingEntity(cik: string, options?: any): AxiosPromise<FilingEntity> {
            return localVarFp.getFilingEntity(cik, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilingEntityManagerControllerApi - object-oriented interface
 * @export
 * @class FilingEntityManagerControllerApi
 * @extends {BaseAPI}
 */
export class FilingEntityManagerControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} cik 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilingEntityManagerControllerApi
     */
    public bootstrapFilingEntity(cik: string, options?: any) {
        return FilingEntityManagerControllerApiFp(this.configuration).bootstrapFilingEntity(cik, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cik 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilingEntityManagerControllerApi
     */
    public getFilingEntity(cik: string, options?: any) {
        return FilingEntityManagerControllerApiFp(this.configuration).getFilingEntity(cik, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ModelBuilderControllerApi - axios parameter creator
 * @export
 */
export const ModelBuilderControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/model-builder/createModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateModel: async (model: Model, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('evaluateModel', 'model', model)
            const localVarPath = `/api/model-builder/evaluateModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reformulateModel: async (model: Model, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('reformulateModel', 'model', model)
            const localVarPath = `/api/model-builder/reformulateModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelBuilderControllerApi - functional programming interface
 * @export
 */
export const ModelBuilderControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelBuilderControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createModel(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createModel(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateModel(model: Model, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelEvaluationOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluateModel(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reformulateModel(model: Model, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reformulateModel(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModelBuilderControllerApi - factory interface
 * @export
 */
export const ModelBuilderControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModelBuilderControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel(options?: any): AxiosPromise<Model> {
            return localVarFp.createModel(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateModel(model: Model, options?: any): AxiosPromise<ModelEvaluationOutput> {
            return localVarFp.evaluateModel(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reformulateModel(model: Model, options?: any): AxiosPromise<Model> {
            return localVarFp.reformulateModel(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ModelBuilderControllerApi - object-oriented interface
 * @export
 * @class ModelBuilderControllerApi
 * @extends {BaseAPI}
 */
export class ModelBuilderControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelBuilderControllerApi
     */
    public createModel(options?: any) {
        return ModelBuilderControllerApiFp(this.configuration).createModel(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Model} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelBuilderControllerApi
     */
    public evaluateModel(model: Model, options?: any) {
        return ModelBuilderControllerApiFp(this.configuration).evaluateModel(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Model} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelBuilderControllerApi
     */
    public reformulateModel(model: Model, options?: any) {
        return ModelBuilderControllerApiFp(this.configuration).reformulateModel(model, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ModelsControllerApi - axios parameter creator
 * @export
 */
export const ModelsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteModel', 'id', id)
            const localVarPath = `/api/models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getHistory', 'id', id)
            const localVarPath = `/api/models/{id}/history`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getModel', 'id', id)
            const localVarPath = `/api/models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sample: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/models/sample`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveModel: async (model: Model, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('saveModel', 'model', model)
            const localVarPath = `/api/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelsControllerApi - functional programming interface
 * @export
 */
export const ModelsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModel(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteModel(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistory(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelHistory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistory(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModel(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getModel(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModels(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Model>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModels(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sample(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sample(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveModel(model: Model, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveModel(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModelsControllerApi - factory interface
 * @export
 */
export const ModelsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModelsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteModel(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory(id: string, options?: any): AxiosPromise<Array<ModelHistory>> {
            return localVarFp.getHistory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel(id: string, options?: any): AxiosPromise<Model> {
            return localVarFp.getModel(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels(options?: any): AxiosPromise<Array<Model>> {
            return localVarFp.listModels(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sample(options?: any): AxiosPromise<Model> {
            return localVarFp.sample(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Model} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveModel(model: Model, options?: any): AxiosPromise<Model> {
            return localVarFp.saveModel(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ModelsControllerApi - object-oriented interface
 * @export
 * @class ModelsControllerApi
 * @extends {BaseAPI}
 */
export class ModelsControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsControllerApi
     */
    public deleteModel(id: string, options?: any) {
        return ModelsControllerApiFp(this.configuration).deleteModel(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsControllerApi
     */
    public getHistory(id: string, options?: any) {
        return ModelsControllerApiFp(this.configuration).getHistory(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsControllerApi
     */
    public getModel(id: string, options?: any) {
        return ModelsControllerApiFp(this.configuration).getModel(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsControllerApi
     */
    public listModels(options?: any) {
        return ModelsControllerApiFp(this.configuration).listModels(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsControllerApi
     */
    public sample(options?: any) {
        return ModelsControllerApiFp(this.configuration).sample(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Model} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsControllerApi
     */
    public saveModel(model: Model, options?: any) {
        return ModelsControllerApiFp(this.configuration).saveModel(model, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MxParserControllerApi - axios parameter creator
 * @export
 */
export const MxParserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MxParserEvaluateRequest} mxParserEvaluateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluate: async (mxParserEvaluateRequest: MxParserEvaluateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mxParserEvaluateRequest' is not null or undefined
            assertParamExists('evaluate', 'mxParserEvaluateRequest', mxParserEvaluateRequest)
            const localVarPath = `/api/mxparser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mxParserEvaluateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MxParserControllerApi - functional programming interface
 * @export
 */
export const MxParserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MxParserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MxParserEvaluateRequest} mxParserEvaluateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluate(mxParserEvaluateRequest: MxParserEvaluateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MxParserEvaluateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluate(mxParserEvaluateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MxParserControllerApi - factory interface
 * @export
 */
export const MxParserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MxParserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {MxParserEvaluateRequest} mxParserEvaluateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluate(mxParserEvaluateRequest: MxParserEvaluateRequest, options?: any): AxiosPromise<MxParserEvaluateResponse> {
            return localVarFp.evaluate(mxParserEvaluateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MxParserControllerApi - object-oriented interface
 * @export
 * @class MxParserControllerApi
 * @extends {BaseAPI}
 */
export class MxParserControllerApi extends BaseAPI {
    /**
     * 
     * @param {MxParserEvaluateRequest} mxParserEvaluateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxParserControllerApi
     */
    public evaluate(mxParserEvaluateRequest: MxParserEvaluateRequest, options?: any) {
        return MxParserControllerApiFp(this.configuration).evaluate(mxParserEvaluateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NarrativeBuilderControllerApi - axios parameter creator
 * @export
 */
export const NarrativeBuilderControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} ticker 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildNarrative: async (ticker: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticker' is not null or undefined
            assertParamExists('buildNarrative', 'ticker', ticker)
            const localVarPath = `/api/zacks/narrative-builder/{ticker}`
                .replace(`{${"ticker"}}`, encodeURIComponent(String(ticker)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} ticker 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportExcel: async (ticker: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticker' is not null or undefined
            assertParamExists('exportExcel', 'ticker', ticker)
            const localVarPath = `/api/zacks/narrative-builder/{ticker}/excel`
                .replace(`{${"ticker"}}`, encodeURIComponent(String(ticker)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NarrativeBuilderControllerApi - functional programming interface
 * @export
 */
export const NarrativeBuilderControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NarrativeBuilderControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} ticker 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildNarrative(ticker: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Narrative>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildNarrative(ticker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} ticker 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportExcel(ticker: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportExcel(ticker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NarrativeBuilderControllerApi - factory interface
 * @export
 */
export const NarrativeBuilderControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NarrativeBuilderControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} ticker 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildNarrative(ticker: string, options?: any): AxiosPromise<Narrative> {
            return localVarFp.buildNarrative(ticker, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} ticker 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportExcel(ticker: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.exportExcel(ticker, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NarrativeBuilderControllerApi - object-oriented interface
 * @export
 * @class NarrativeBuilderControllerApi
 * @extends {BaseAPI}
 */
export class NarrativeBuilderControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} ticker 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NarrativeBuilderControllerApi
     */
    public buildNarrative(ticker: string, options?: any) {
        return NarrativeBuilderControllerApiFp(this.configuration).buildNarrative(ticker, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} ticker 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NarrativeBuilderControllerApi
     */
    public exportExcel(ticker: string, options?: any) {
        return NarrativeBuilderControllerApiFp(this.configuration).exportExcel(ticker, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegisterEmailControllerApi - axios parameter creator
 * @export
 */
export const RegisterEmailControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} email 
         * @param {string} [stock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (email: string, stock?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('register', 'email', email)
            const localVarPath = `/public/register-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (stock !== undefined) {
                localVarQueryParameter['stock'] = stock;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegisterEmailControllerApi - functional programming interface
 * @export
 */
export const RegisterEmailControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegisterEmailControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} email 
         * @param {string} [stock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(email: string, stock?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(email, stock, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegisterEmailControllerApi - factory interface
 * @export
 */
export const RegisterEmailControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegisterEmailControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} email 
         * @param {string} [stock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(email: string, stock?: string, options?: any): AxiosPromise<void> {
            return localVarFp.register(email, stock, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegisterEmailControllerApi - object-oriented interface
 * @export
 * @class RegisterEmailControllerApi
 * @extends {BaseAPI}
 */
export class RegisterEmailControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} email 
     * @param {string} [stock] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterEmailControllerApi
     */
    public register(email: string, stock?: string, options?: any) {
        return RegisterEmailControllerApiFp(this.configuration).register(email, stock, options).then((request) => request(this.axios, this.basePath));
    }
}


